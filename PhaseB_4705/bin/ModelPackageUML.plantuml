@startuml Class_Diagram_UML
skinparam style strictuml
skinparam DefaultFontName Arial
skinparam DefaultFontSize 16
skinparam DefaultFontStyle bold
skinparam ArrowThickness 2.2
skinparam ArrowColor #red
hide empty members

package Model
{
    class Player
    {
        - {static} players : int
        - money : double
        - loans : double
        - bills : double
        - position : int
        - id : int
        - roll : int
        - task : String
        - hasPlayed : boolean
        - isTaskDone : boolean
        - pawnImageName : String

        'aggregation of DealCard
        'aggregation of MailCard
        +Player()

        +GetPawnImageName() : String
        +GetId() : String
        +GetRoll() : int
        +HasPlayed() : boolean
        +IsTaskDone() : boolean
        +GetTask() : String
        +GetMoney() : double
        +GetLoans() : double
        +GetBills() : double
        +GetPosition() : int

        +SetPawnImageName(imageName : String) : void
        +SetId(id : int) : void
        +SetRoll(roll : int) : void
        +SetHasPlayed(hasPlayed : boolean) : void
        +SetTaskDone(isDone : boolean) : void
        +SetTask(task : String) : void 
        +SetMoney(money : double) : void
        +SetLoans(loans : double) : void
        +SetBills(bills : double) : void
        +SetPosition(position : int) : void

        +RollDice() : void
        +AddDealCard(card : DealCard) : void  
        +GetMailCards() : LinkedList<MailCard> 
        +AddDealCard(card : MailCard) : void  
        +GetDealCards() : LinkedList<DealCard>   
    }
    Player "1" --o "*" DealCard
    Player "1" --o "*" MailCard

    class Tile
    {
        'association from CardPosition
    }
    Tile "1" -- "1" CardPosition


    abstract class CardPosition
    {
        -icon : String

        -position : int
        -day : String

        'dependency with Controller
        CardPosition(imageName : String, controller : Controller)

        +GetPosition() : int
        +GetDay() : String
        +GetIcon() : String
        +GetController() : Controller

        +SetPosition(position : int) : void
        +SetDay(day : int) : void
        +SetIcon(icon : String) : void
        +SetController(controller : Controller) : void

        +{abstract}performAction() : void
    }
    CardPosition --* Controller.Controller


    abstract class MailPosition extends CardPosition
    {    
        MailPosition(imageName : String, controller : Controller)
    }
    MailPosition --* Controller.Controller

    class OneMailPosition extends MailPosition
    {
        +OneMailPosition(imageName : String, controller : Controller)
        +performAction(player : Player) : void
        +toString() : String
    }
    OneMailPosition --* Controller.Controller

    class TwoMailPosition extends MailPosition
    {
        +TwoMailPosition(imageName : String, controller : Controller)
        +performAction(player : Player) : void
        +toString() : String
        -ShowCard(card : MailCard, player : Player) : void
    }
    TwoMailPosition --* Controller.Controller


    class DealPosition extends CardPosition
    {
        +DealPosition(imageName : String, controller : Controller)
        +performAction(player : Player) : void
        +toString() : String
    }
    DealPosition --* Controller.Controller

    class Sweepstakes extends CardPosition
    {
        +SweepsTakes(imageName : String)
        +performAction(player : Player) : void
        +toString() : String
    }
    

    class Lottery extends CardPosition
    {
        +Lottery(imageName : String, controller : Controller)
        +performAction(player : Player) : void
        +toString() : String
    }
    Lottery --* Controller.Controller

    class RadioContest extends CardPosition
    {
        +RadioContest(imageName : String, controller : Controller)
        +performAction(player : Player) : void
        +toString() : String
    }
    RadioContest --* Controller.Controller

    class BuyerPosition extends CardPosition
    {
        +BuyerPosition(imageName : String, controller : Controller)
        +performAction(player : Player) : void
        +toString() : String
    }
    BuyerPosition --* Controller.Controller

    class CasinoNight extends CardPosition
    {
        +CasinoNight(imageName : String, controller : Controller)
        +performAction(player : Player) : void
        +toString() : String
    }
    CasinoNight --* Controller.Controller

    class YardSale extends CardPosition
    {
        +YardSale(imageName : String, controller : Controller)
        +performAction(player : Player) : void
        +toString() : String
    }
    YardSale --* Controller.Controller

    class PayDayPosition extends CardPosition
    {
        +PayDayPosition(imageName : String, controller : Controller)
        +performAction(player : Player) : void
        +toString() : String
    }
    PayDayPosition --* Controller.Controller

    class StartPosition extends CardPosition
    {
        +StartPosition(imageName : String)
        +performAction(player : Player) : void
        +toString() : String
    }

    class JackpotPosition extends CardPosition
    {
        -jackpot : float

        +JackpotPosition(imageName : String)
        +performAction(player : Player) : void
        +GetJackpot() : float
        +SetJackpot(jackpot : float) : void
    }
    

    abstract class Card
    {
        -imageIcon : String
        -message : String
        -type : String

        Cards.Card(type,message,icon : String)
        +GetType() : String
        +GetImage() : String
        +GetMessage() : String
        +{abstract} Action(board:Board, player:Player) : void
    }
    Card --* Board

    class DealCard extends Card
    {
        -cost : double
        -value : double
        -choise1 : String
        -choise2 : String

        +DealCard(type,message:String, cost,value : float, icon,choise1,choise2:String)
        +GetChoise(choise : int) : String
        +GetCost() : float
        +GetValue() : float
        +Action(board:Board, player:Player) : void
    }

    abstract class MailCard extends Card
    {
        choise : String
        euro : float

        MailCard(type,message,choise:String, euro:float, icon : String)
        +GetEuro() : float
        +GetChoise() : String
    }

    class PayTheNeighborCard extends MailCard
    {
        +PayTheNeighborCard(type,message,choise:String, euro:float, icon : String)    
        +Action(board:Board, player:Player) : void

    }

    class MadMoneyCard extends MailCard
    {
        +MadMoneyCard(type,message,choise:String, euro:float, icon : String)
        +Action(board:Board, player:Player) : void            
    }

    class CharityCard extends MailCard
    {
        +CharityCard(type,message,choise:String, euro:float, icon : String)
        +Action(board:Board, player:Player) : void            
    }

    class BillCard extends MailCard
    {
        +BillCard(type,message,choise:String, euro:float, icon : String)
        +Action(board:Board, player:Player) : void            
    }

    class MoveToDealBuyerCard extends MailCard
    {
        +MoveToDealBuyerCard(type,message,choise:String, euro:float, icon : String)
        +Action(board:Board, player:Player) : void            
    }

    class AdvertisementCard extends MailCard
    {
        +AdvertisementCard(type,message,choise:String, euro:float, icon : String)
        +Action(board:Board, player:Player) : void            
    }


    class Board
    {
        -{static} MAX_TILES  : final int
        -{static} PLAYERS    : final int

        +Board()
        'aggregation of Player
        'aggregation of DealCard
        'aggregation of MailCard
        'aggregation of Tile
        'association with Tile
    }
    Board "1" --o "*" MailCard
    Board "1" --o "*" DealCard
    Board "1" --o "2"  Player
    Board "1" --o "31" Tile
    Board "1" -- "2" Tile
}
@enduml